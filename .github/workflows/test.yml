name: FizzBuzz Tests 

on:
  push:  # Déclenche l'exécution après chaque push sur main
    branches:
      - main  # Se déclenche sur la branche main
  pull_request:  
    branches:
      - main  
  workflow_dispatch:  # Permet d'exécuter les tests manuellement depuis l'interface GitHub Actions

jobs:
  test:  # Définit un job appelé "test"
    runs-on: ubuntu-latest  # Spécifie que le job s'exécutera sur une machine virtuelle Ubuntu la plus récente

    steps:
      - name: Cloner le dépôt  # Nom de l'étape affiché dans GitHub Actions
        uses: actions/checkout@v3  # Utilise l'action officielle de GitHub pour récupérer le code du dépôt

      - name: Configurer Python et installer les dépendances  
        run: |
          python -m pip install --upgrade pip  
          pip install python
          pip install -r requirements.txt || echo "No requirements.txt found"  
        uses: actions/setup-python@v4  
        with:
          python-version: "3.10" 

      - name: Exécuter les tests unitaires  # Étape pour exécuter les tests
        run: python test_unitaire.py  # Exécute le script de test 
             pip install unittest-xml-reporting
             
             python -m xmlrunner discover -o test-reports/

      - name: Explorer le concept de "code coverage" en exécution locale  # Mesurer la couverture de code en locale
        run: |
          pip install coverage  
          coverage run -m unittest discover  
          coverage report -m  # Affiche la couverture 

      - name: Explorer la couverture de code en local et sur GitHub Actions # Mesurer la couverture de code sur    git
        run: |
          pip install coverage
          coverage run -m unittest discover  
          coverage report -m  # Affiche la couverture dans la console GitHub Actions

