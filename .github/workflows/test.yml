name: FizzBuzz Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Cloner le dépôt  # Nom de l'étape affiché dans GitHub Actions
        uses: actions/checkout@v4  # Utilise l'action officielle de GitHub pour récupérer le code du dépôt

      - name: Configurer Python  # Étape pour installer la version correcte de Python
        uses: actions/setup-python@v4  # Utilise l'action officielle pour configurer Python
        with:
          python-version: "3.10"

      - name: Installer les dépendances  # Étape pour installer les dépendances du projet
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Exécuter les tests unitaires  # Étape pour exécuter les tests
        run: |
          pip install unittest-xml-reporting
          python -m xmlrunner discover -o test-reports/

      - name: Publier le rapport des tests unitaires
        uses: actions/upload-artifact@v4
        with:
          name: Test Report
          path: test-reports/

      - name: Explorer la couverture de code en local et sur GitHub Actions # Mesurer la couverture de code sur git
        run: |
          pip install coverage
          coverage run --source=. -m unittest discover  
          coverage report -m  # Affiche la couverture dans la console GitHub Actions
          coverage xml -o coverage.xml

      - name: Vérifier si coverage.xml existe
        run: ls -l coverage.xml || echo "coverage.xml NOT FOUND"

      - name: Publier le rapport de couverture de code
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          path: coverage.xml

      - name: Vérifier la qualité du code (PEP8)
        run: |
          pip install flake8
          flake8 --max-line-length=100 --output-file=flake8-report.txt || true

      - name: Publier le rapport de contrôle qualité
        uses: actions/upload-artifact@v4
        with:
          name: Flake8 Report
          path: flake8-report.txt

      - name: Générer la documentation
        run: |
          pip install sphinx
          sphinx-quickstart -q -p "FizzBuzz" -a "Auteur" -v "1.0" docs
          sphinx-apidoc -o docs/source .
          echo "import os, sys; sys.path.insert(0, os.path.abspath('../'))" >> docs/source/conf.py
          echo "extensions = ['sphinx.ext.autodoc']" >> docs/source/conf.py
          sphinx-build -b html docs/source docs/build
  
      - name: Vérifier la présence du fichier index.rst
        run: |
          ls -l docs/source/index.rst || echo "index.rst NOT FOUND"

      - name: Publier la documentation
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: docs/build/
